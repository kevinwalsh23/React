React Components: State and Props

Each component can store its own local information in its State
Only class components can have local State
State declared within constructor 
this.state = {}

State should be modified only using setState()
JSX attributes passe into copmonent as single object
accessed with this.props.variable
State information passed to child compnents as props
Handling Events
similiar to way you how events on Dom elements
use camelCase

<Card OnClick={() => this.onDishSelect(dish)}>

Lifting State Up
-several components can share same data
--can send data back up to ancestor components

Lists and Keys
handled similiar to javascript
map js function allows to iterate over Lists
Keys should be given to elements in the array
Unique ids allow for all items to be properly iterated over
Ids let react know what items have been removed/added
React only modifies only parts of DOM tree that needs to be updated

Pass information to child component from parent component using props
List state data up to parent, make available to all other children components through props

React Components: Lifecycle Methods
React app made of multiple react components
Creation > Mounting > Updating > Unmounting > disapearance 

Mounting Methods
called when instance of component is being created and inserted in the DOM
constructor()
getDerivedStateFromProps()
render()
componentDidMount()
componentWillMount() older method that is deprecated

Components
props > properties or the data for the component

Dish Detail component only took props, no state
Presentational component because only dependent on input
Container component, store state and pass to children
Skinny; just render the view
fat: track more data in state

Presentational
-mainly concerned with rendering the view aka markup
Render view based on data passed in through props
Do not maintain own local state
Depend on parent to pass in app state to render view

Container:
responsible for making things work: data fetching, state updates
make use of presentational components for the actual rendering
can wrap presentational components in wrapping divs
Not responsible for contructing views
Provide data to presentational component in terms of props
Maintain state and communicate with data sources

React Lifecycle Methods

Functional Components
simplest way to define React components
JS function that returns a React Element, or collection of react elements
Receives props as parameter
Cannot have local state of access lifecycle hooks

React Virtual DOM
Browser DOM is browser object
Virtual DOm is React object
-lightweight representation of browser DOM
-in memory tree data structure of plain js objects
-manipulations extremely fast compared to modifying browser DOM
created completely from scratch on every setState

Updating DOM
Diffing algo will detect all nodes that are changed
updates enture subtree if diffing detects two elements are of diff types
using key you can hint child elements as stable
no need to re render where keys do not change
React Fiber is new reconciliation algo in React 16
Incremental rendering

React Router
Navigating through views
Collection of navigational components
enables navigation among views
Router components, route matching components and navigation components

Uses a browser based b
Web App Routing
install react-router-Dom
<Browser Router>
creates specialized history object
Also <HashRouter> if you are using static file server
Enclose your app in Browser Router

Route matching
<Route and Switch>
<Route> component prop specifies corresponding view for the location. url for the view
Route components prop specifies corresponding view for the location
Exact attribute ensures path must be exactly matched
Redirect component enable default route specification
Switch enables grouping together several routes
iterates over all children to find first one that matches the path

navigation
<Link or navlink copmonents>
Link creates links in your application
will render as a tag in html
Navlink also attaches the active class to the link when its prop matches the current location

Single Page Applications (SPA)
Website or application that fits into an ensingletire Page
Do not need to reload entire application each time you request
Once initial webapp downloaded, most other interactions are similiar to interacting with desktop application
Most resources retrieved with single page load
redraw parts of the page when needed without requireing full server roundtrip

Challenges
-SEO
-Partitioning the responsibility between the client and server
-Server acts as data source and work offloaded to client specialized
-Maintaining history, clicking back button or forward button, where do you take the user?
-Analytics
-Speeding up initial page load
-Can do partial rendering

Parameters
React Router
paths specified by urls
can carry parameter values ie /menu43 for dish 43
Route parameters specifie in path specification as a token
path: menu/:id where id is token

Route parameters can be specified using a link parameter specifying the link
eg <Link to{'menu/${dish.id)'}>
Route passes three components to the component
-match (route params), location (where you are) and history (allow you to go back)

match object
provides information about how a <Route path> matched the url
match.params as a key value pair 

Controlled Forms
Form inputs in state of component
Form validation (client side)
Each form element maintains own state 
Can set initial value in state for form values

Makes react component control form it renders
single source of truth
tying form state to component state
controlled component
form state and component state will match
Every state mutation will have an assocaited handler function

Uncontrolled Components
allows you to handle form data by dom itself
instead of event handler use a ref to get form values from the DOm
easier to integrate react with non react compared

Model View Controller Framework (MVC)
Design Patterns
-Well documented solution for recurring problem
also referred to as a architechtrual Pattern
Software design Pattern
reusable solution to commnly occuring problems
isolates domain logic from user interface
permits independent development, testing and maintainance (separation of concerns)
Model
mananges behavior and data of application  
responds to requests for information about its state
responds to instructions to change state
in event driven systems, model notifies observers when information changes so they can react
View
renders the model into a form suitable for interaction, typically UI element
multiple views can exist for a single model for different purposes
viewport typically has one to one correspondence with a display surface and knows how to render it
Controller
receives user input and initiate response by making calls on model objects
controller accepts input from user and instructs model and viewport to perform action based on that input

Flux Architecture
React initially viewed as the V in MVC
FB found issues with MVC approach
discarded in favor of Fluxproblems with cascading updates, decentralized mutations, race conditions
Unidirectional Data Flow
Action > Dispatcher > Store > View

Redux
Derives a lot from Flux
predictable state container for Javascript apps 
not directly related to react
makes state mutations predictable
Main Priciples
Single Source of truth
single state object tree within a single store
state is read only (only gets, no sets)
changes should only be done through Actions 
Changes are made with pure functions
take previous state and action and return next state
no mutation of the previous state 
enables powerful techniques
logging
API Handling
undo and redo 
state persistence 
time travel debugging 
State: stored in plain JS object
Action: plain JS object with a type field that specifies how to changr something in the state
Reducer: pure functions that take the current state and action and return a new state
update data immutably (previous state not modified, new state created)
Redux Store
holds current state value
created using createStore()
Supplies three Methods
dispatch(): states state update with the provided action object
getState(): returns current stored state value
subscribe: accepts a callback function that will run every time an action is dispatched
React-redux package for bindings between react and redux
connect():
generates a wrapper 'container' copmonent that subscribes to the store
Surround your App root with <Provider>
takes the stor as an attribute
makes store accessible to all connected components
connect(): function takes two optional args
mapstatetoprops: called evry time store state changes. returns object full of data with each field being a prop for the wrapped component
mapDispatchtoprops(); receives the dispath() method and should return an object full of functions that use dispatch()

Redux Actions
actions: payloads of information that send data from application to the store
done with store.dispatch()
Plain JS object
type property indicates type of action to be performed
best supported by defining action types as string objects
rest of object contains data necessary for action

Action Creators
functions that create actions
encapsulates process of creating action object
return action object
resulting action object can be passed to the store through dispatch()
Reducers take previosus state and action and return the next state
do not mutate state
make copy and modify copy before returning
actions handled through a switch statement switching on action type
return previous state in default case 

Splitting and Combining Reducers
depending on state shape, fields and updates can be decoupled
split reducer into simpler reducer functions that operate on only some of the fields
manages parts slices of global state
Combine the simpler functions to generate the overall state

Redux Thunk & Middleware
middleware that allows you to return a function rather than action
loggar middleware prints log of actions initiated on redux store
capability to run code after an action is dispatched but befor reaches reducer
-3p extension point
-loggin, async API calls
-server calls
Middleware:
-forms pipeline that wraps around the dispatch()
-pass actions onward
-restart the dispatch pipeline
-access the store state
Middleware used for:
-inspecting actions and the state
-modify actions
-dispatch other actions
-stop actions from reaching Reducers

applyMiddleware() function
sets up middleware pipelinereturns a "store enhancer" that is passed top createStore

Thunk
subroutine that injects ad additional calculation in another subroutine
-delay a calculation until it is needed
-insert operations at beginning or end of other subroutine

Redux Thunk
Middleware that allows you to write an action creator than returns a function rather than action
-can be used to delay dispatch of an action
-dispatch only if certain condition met
Inner function receives the dispath() and getState() store Methods
can examine state and see if action fits and can be allowed with current state
Useful complex synchronous logic
multiple dispatches
conditional dispatches 
simple async logic

REdux Saga: es6 generators to control pausable functions
-complex async logic
-ongoing background thread like processing behavior

Networking Essentials

REST Representational State Transfer
Web Services: designed to support interoperability of systems connect over a network 
SOA Service oriented Architecture
SOAP Simple Object Access Protocol
uses wsdl web services description language, xml based
REST
use web standards
exchange data using xml or json
simpler compared to SOAP, wsdl

Representational State Transfer
for distributed hypermedia systems like www
collection of network architechtrual principles whjich outline how resources are designed and addressed
1. http methods explicitly
2. be stateless - server doesnt store any information about the state
3. expose directory like URIs
4. Transfer using XML or JSON or both but typically JSON

motivation was to capture chars of web that made web successful
-URI uniform resource indicator addressable resources
-http Protocol
-make a request -> receive response -> display response
Explouts use of HTTP protocol behond http post and http get
-http put, http DELETE 
preserve idemptence

Nouns (resources) (unconstrained)
resources
key absractio of information in REST is a resource
A resource is a conceptual mapping to a set of entities
REpresented with global identifier (URL in HTTP)
any information can be named a resource
REST uses URI to identify resources
ie http://www.conFusion.food/dishes/
as you traverse path you go from more generic to more specific

Verbs (constrained)
Represent actions to be performed
Get > read
Post > create 
Put > update
delete > delete

HTTP Get
used by clients to requests information
isseing a get requests transfers the data from the server to the client in some representation
Get http://www.confusion.food/dishes/452

HTTP Post creates a resources
content included in body of request
Content: {first name, last name}

HTTP PUT updates a resource
can send partial or complete update

HTTP DELETE removes the resource identified by the URI

Representations (constrained)
How data is represeneted or returned to the client for presentation

Stateless Server
Client side should track its own state:
eg using cookies, client side database
every request must include sufficient information for server to serve up the requested information
client side mvc set up
each request treated as a brand new request

Promises
promise: mechanism that supports async computation
proxy for value not necessarily known when promise created
represents value may be available now, later, or never
new Promise ( function (resolve, reject) {...});
solves callback hell (heavily nested callback code) problem
promises can be chained- when deliveres can generate a new promise 
can immediately return, Promise.resolve(result, Promise.reject(errpr)

Fetch 
communicating with the server 
XMLHTTPRequest - outdated
Fetch API modern replacement
0provides interfaces for fetching resources (including accross the network)
more powerful and flexible features
promise based

Fetch abstractions
request: reps a resource request
response: reps response to the request
Headers: Rep response/request headers, allowing you to query them and take diff actions dependent on results
Body: provides methods relating to the body of the response/request, allows you to declare content type and how to be handled

Fetch Usage
fetch(baseUrl + 'dishes)
    .then(response => response.json())
    .then(data => console.log(date))
    (chaining of promises above)
    .catch(error => console.log(error.message));

Fetch Posting Data
expliciting specify method if want to not use Get
fetch(baseURL + 'dishes, {
    method: 'POST',
    body: JSON.stringify(newComment),
    headers: {
        'Content-Type': 'application/json'
    },
    credentials: 'same-origin'
})

Fetch Dealing with Errors
explicitly check status code if acceptable or error
fetch(baseurl + 'dishes)
    .then(response => {
        if (response.ok) {
            return response;
        }
        else {
            var error = new Error('Error' + response.status + response.statusText);
            error.response = response;
            throw error;
            (throwing error gets sent to the catch you implemented)
        }
    },
    //never managed to communicate with the server
    //promises allow you to give two callback functions
    //rejection of promise handled
    error => {
        var errmess = New Error(error.message);
        throw errmess;
    }}

Cross-Fetch
can use fetch polyfill if browser does not support fetch (old browsers)
library privides support for Fetch both in Node apps and browsers
uses whatwg-fetch polyfill in browsers that do not have fetch support
uses node-fetch for Node apps on server
To use in app:
import fetch from 'cross-fetch';

Fetch alternatives
Axios
Superagent


React Animations
React-transition-group
React-animiation-components
react transition group
set of coponents for managing component states, including mounting and unmounting, designed with animation in mind
components supported:
transition:
describe transition for one component state to another component over time
-entering, entered, exiting and exited
used to animate mounting and unmounting of a component
the in props is used to toggle the transition state
when true component begins sequence of entering to entered state
timeout specifies duration spent in the entering state
CSSTransition
applies pair of class names during the appear, enter and exit stages
uses in prop to decide when to apply the transition class
classNames-="page"
should define page-enter, page-enter-active, page-exit, page-exit-active

Transition group
manages set of <transition> components in a list
automatically toggles the in prop for the components

React Animation Components
set of react components implemented using react-transition-group
procides drop in GPU accelerated animiations and wrappers for group effects
Fade, Transform, FadeTransform
Wrapper components
stagger, random, loop

Webpack
create-react-app to scafold app
uses react scripts and npm modules under the hood
internally uses webpack to build dist folder
webpack comes built in
webpack is a module bundler for modern js apps
recursively builds a dependency graph that includes every module your app needs,
then packages all of those modules into a small number of budles
Bundle: javascript file that incorporates assets:
-that belong together
-treats everything as javascript
-should be served to client in response to a single file request
-may include js,css html or any other type of file
Webpack examines your application source code for import statements
-builds dependency graph
-emits one or more bundles
-use plugins to preprocess and minify non JS files: typescript, sass, less, exactly
Configuration in webpack.config.js

Webpack Concepts
-Entry: the point where the webpack should start and follow the graph of dependencies
-Output: where to bundle your app
-Loaders: webpack only understands JS. webpack treats every file as a module. Loaders transform files into modules as they are added to the dependency graph
-Plugs: perform actions and custom functionality on compilations or chunks of your bundled modules
